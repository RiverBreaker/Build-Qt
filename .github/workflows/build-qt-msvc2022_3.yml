name: Build Qt 6.9 (Windows VS2022)

on:
  workflow_dispatch:

jobs:
  build-qt:
    name: Build Qt 6.9 for Windows (VS2022)
    runs-on: windows-latest

    strategy:
      matrix:
        config: [ Debug, Release, RelWithDebInfo ]
    env:
      QT_SOURCE_URL: https://download.qt.io/official_releases/qt/6.9/6.9.0/single/qt-everywhere-src-6.9.0.zip

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install build tools via Chocolatey
        shell: pwsh
        run: |
          choco install -y cmake ninja 7zip openssl llvm gperf `
            --no-progress `
            --limit-output

      - name: Download & extract Qt
        shell: pwsh
        run: |
          $zip = Join-Path $env:RUNNER_TEMP qt6.zip
          Invoke-WebRequest $env:QT_SOURCE_URL -OutFile $zip
          7z x $zip -y -o"$env:RUNNER_TEMP/qt6_src"

      - name: Prepare build directory
        shell: pwsh
        run: |
          Remove-Item -Recurse -Force "$env:RUNNER_TEMP/build" -ErrorAction SilentlyContinue
          New-Item -ItemType Directory "$env:RUNNER_TEMP/build" | Out-Null

      - name: Configure & build ${{ matrix.config }}
        shell: pwsh
        env:
          CONFIG: ${{ matrix.config }}
        run: |
          # 1. 查找 Visual Studio 安装路径
          $vsRoot = & "${Env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe" `
            -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 `
            -property installationPath

          # 2. 加载 MSVC 环境
          $vcvarsPath = Join-Path $vsRoot "VC\Auxiliary\Build\vcvars64.bat"
          cmd /c "call `"$vcvarsPath`" amd64 && set > %TEMP%\vsvars.txt"
          Get-Content "$env:TEMP\vsvars.txt" | ForEach-Object {
            if ($_ -match '^(.*?)=(.*)$') {
              Set-Item -Path "Env:$($matches[1])" -Value $matches[2]
            }
          }

          # 安装和打包目录
          $installRoot  = "$env:RUNNER_TEMP\qt-6.9\$env:CONFIG"
          $artifactsDir = "$env:RUNNER_TEMP\artifacts"

          # 创建安装目录
          New-Item -ItemType Directory -Path $installRoot -Force | Out-Null

          # Configure
          Set-Location "$env:RUNNER_TEMP/build"
          cmake "$env:RUNNER_TEMP/qt6_src/qt-everywhere-src-6.9.0" `
            -G "Ninja" `
            -DCMAKE_BUILD_TYPE=$env:CONFIG `
            -DCMAKE_INSTALL_PREFIX=$installRoot `
            -DQT_FEATURE_webengine=OFF `
            -DOPENSSL_ROOT_DIR="C:/Program Files/OpenSSL" `
            -DClang_INCLUDE_DIR="C:/Program Files/LLVM/include" `
            -DGPERF_EXECUTABLE="C:/ProgramData/chocolatey/bin/gperf.exe" `
            -Wno-dev

          # Build & Install
          cmake --build . --parallel --target install

          # Package
          New-Item -ItemType Directory -Path $artifactsDir -Force | Out-Null
          7z a "$artifactsDir/qt-6.9.0-win-msvc2022-$env:CONFIG.7z" $installRoot

  release:
    needs: build-qt
    runs-on: ubuntu-latest
    steps:
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name:     ${{ github.ref }}
          release_name: Qt 6.9.0 Windows VS2022 Builds
          draft:        false
          prerelease:   false

      - name: Upload artifacts
        uses: actions/upload-release-asset@v1
        with:
          upload_url:        ${{ steps.create_release.outputs.upload_url }}
          asset_path:        ${{ runner.temp }}/artifacts
          asset_name:        qt-6.9.0-win-msvc2022
          asset_content_type: application/x-7z-compressed
