name: Build Qt 6.9 (Windows VS2022)

on:
  workflow_dispatch:

jobs:
  build-qt:
    name: Build Qt 6.9 for Windows (VS2022)
    runs-on: windows-latest

    strategy:
      matrix:
        config: [ Debug, Release, Debug-and-Release ]
    env:
      QT_SOURCE_URL: https://download.qt.io/official_releases/qt/6.9/6.9.0/single/qt-everywhere-src-6.9.0.zip

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Enable long paths
        shell: pwsh
        run: |
          git config --system core.longpaths true
          Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem" -Name "LongPathsEnabled" -Value 1

      - name: Install build tools via Chocolatey
        shell: pwsh
        run: |
          choco install -y cmake ninja 7zip openssl llvm gperf `
            --no-progress `
            --limit-output

      - name: Download & extract Qt
        shell: pwsh
        run: |
          $zip = Join-Path $env:RUNNER_TEMP qt6.zip
          Invoke-WebRequest $env:QT_SOURCE_URL -OutFile $zip
          7z x $zip -y -o"$env:RUNNER_TEMP/qt6_src" -mmt=on

      - name: Prepare build directory
        shell: pwsh
        run: |
          Remove-Item -Recurse -Force "$env:RUNNER_TEMP/build" -ErrorAction SilentlyContinue
          New-Item -ItemType Directory "$env:RUNNER_TEMP/build" | Out-Null
      
      - name: Configure & build ${{ matrix.config }}
        shell: cmd
        env:
          CONFIG: ${{ matrix.config }}
        run: |
          for /f "usebackq tokens=*" %%V in (`"%ProgramFiles(x86)%\Microsoft Visual Studio\Installer\vswhere.exe" -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath`) do set "vsRoot=%%V"
          call "%vsRoot%\VC\Auxiliary\Build\vcvars64.bat" amd64
      
          set "SRC_QT=%RUNNER_TEMP%\qt6_src\qt-everywhere-src-6.9.0"
          set "BUILD_DIR=%RUNNER_TEMP%\build-%CONFIG%"
          set "INSTALL_DIR=%RUNNER_TEMP%\qt-6.9\%CONFIG%"
          set "ARTIFACTS_DIR=%RUNNER_TEMP%\artifacts"
      
          if exist "%BUILD_DIR%" rmdir /s /q "%BUILD_DIR%"
          mkdir "%BUILD_DIR%" && cd /d "%BUILD_DIR%"
          mkdir "%INSTALL_DIR%" 2>nul
          mkdir "%ARTIFACTS_DIR%" 2>nul
      
          rem 根据 CONFIG 选择 configure 参数
          if /I "%CONFIG%"=="Debug" (
            set QT_CONF_MODE=-debug
          ) else if /I "%CONFIG%"=="Release" (
            set QT_CONF_MODE=-release
          ) else (
            set QT_CONF_MODE=-debug-and-release
          )
      
          rem 调用 configure 脚本
          call "%SRC_QT%\configure.bat" ^
            -shared ^
            %QT_CONF_MODE% ^
            -prefix "%INSTALL_DIR%" ^
            -nomake examples ^
            -nomake tests ^
            -skip qtwebengine ^
            -opensource ^
            -confirm-license ^
            -qt-libpng ^
            -qt-libjpeg ^
            -qt-zlib ^
            -qt-pcre ^
            -qt-freetype ^
            -schannel ^
            -platform win32-msvc
      
          rem 编译与安装
          cmake --build . --parallel
          ninja install
      
          rem 打包
          7z a "%ARTIFACTS_DIR%\qt-6.9.0-win-msvc2022-%CONFIG%.7z" "%INSTALL_DIR%" -mmt=on


  release:
    needs: build-qt
    runs-on: ubuntu-latest
    steps:
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name:     ${{ github.ref }}
          name: Qt 6.9.0 Windows VS2022 Builds
          draft:        false
          prerelease:   false

      - name: Upload artifacts
        uses: actions/upload-release-asset@v1
        with:
          upload_url:        ${{ steps.create_release.outputs.upload_url }}
          asset_path:        ${{ runner.temp }}/artifacts
          asset_name:        qt-6.9.0-win-msvc2022
          asset_content_type: application/x-7z-compressed
