name: Build Qt 6.9.0 (All Modes)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  QT_VERSION: 6.9.0
  QT_MAJOR_MINOR: 6.9

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        compiler: [msvc, gcc, llvm]
        build_type: [Debug, Release, DebugAndRelease]
        exclude:
          # Linux/macOS 不支持 MSVC
          - os: ubuntu-latest
            compiler: msvc
          - os: macos-latest
            compiler: msvc
          # Windows 下只使用 MSVC、MinGW 和 LLVM
          - os: windows-latest
            compiler: gcc
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (Ubuntu)
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake ninja-build python3 zip curl \
            libx11-dev libxext-dev libxrender-dev libxcb1-dev libx11-xcb-dev \
            libfontconfig1-dev libfreetype-dev libxkbcommon-dev
          if [[ "${{ matrix.compiler }}" == "llvm" ]]; then
            sudo apt-get install -y clang
            export CC=clang
            export CXX=clang++
          fi

      - name: Install dependencies (macOS)
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          brew update || true
          brew install cmake ninja python3
          if [[ "${{ matrix.compiler }}" == "llvm" ]]; then
            export CC=clang
            export CXX=clang++
          fi

      - name: Install dependencies (Windows)
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          choco install -y ninja cmake python
          if [[ "${{ matrix.compiler }}" == "gcc" ]]; then
            choco install -y mingw
            echo "##[add-path]C:\\tools\\mingw64\\bin"
            set CC=x86_64-w64-mingw32-gcc
            set CXX=x86_64-w64-mingw32-g++.exe
          elif [[ "${{ matrix.compiler }}" == "llvm" ]]; then
            choco install -y llvm
            set CC=clang
            set CXX=clang++
          fi

      - name: Setup MSVC environment
        if: ${{ matrix.os == 'windows-latest' && matrix.compiler == 'msvc' }}
        uses: microsoft/setup-msbuild@v2

      - name: Download Qt source
        run: |
          curl -LO https://download.qt.io/official_releases/qt/${{ env.QT_MAJOR_MINOR }}/${{ env.QT_VERSION }}/single/qt-everywhere-src-${{ env.QT_VERSION }}.tar.xz
          tar xf qt-everywhere-src-${{ env.QT_VERSION }}.tar.xz
        shell: bash

      - name: Configure Qt
        run: |
          cd qt-everywhere-src-${{ env.QT_VERSION }}
          mkdir build && cd build
          CONFIG_FLAGS="-prefix $PWD/install -opensource -confirm-license -nomake tests -nomake examples -skip qtwebengine -shared"
          case "${{ matrix.build_type }}" in
            Debug) CONFIG_FLAGS+=" -debug";;
            Release) CONFIG_FLAGS+=" -release";;
            DebugAndRelease) CONFIG_FLAGS+=" -debug-and-release";;
          esac
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            ../configure.bat $CONFIG_FLAGS
          else
            ../configure $CONFIG_FLAGS
          fi
        shell: bash

      - name: Build Qt
        run: |
          cd qt-everywhere-src-${{ env.QT_VERSION }}/build
          cmake --build . --parallel
        shell: bash

      - name: Install Qt
        run: |
          cd qt-everywhere-src-${{ env.QT_VERSION }}/build
          cmake --install .
        shell: bash

      - name: Package Qt build
        run: |
          cd qt-everywhere-src-${{ env.QT_VERSION }}/build
          ARCHIVE_NAME=Qt6.9-${{ matrix.os }}-${{ matrix.compiler }}-${{ matrix.build_type }}-shared.zip
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            powershell Compress-Archive -Path install -DestinationPath $ARCHIVE_NAME
          else
            zip -r $ARCHIVE_NAME install
          fi
          echo "ARCHIVE_NAME=$ARCHIVE_NAME" >> $GITHUB_ENV
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: Qt6.9-${{ matrix.os }}-${{ matrix.compiler }}-${{ matrix.build_type }}-shared
          path: qt-everywhere-src-${{ env.QT_VERSION }}/build/${{ env.ARCHIVE_NAME }}
