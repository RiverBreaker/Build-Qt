name: Build and Release Qt 6.9 (Windows VS2022)

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch: 

jobs:
  build-qt:
    runs-on: windows-latest
    env:
      QT_SOURCE_URL: https://download.qt.io/official_releases/qt/6.9/6.9.0/single/qt-everywhere-src-6.9.0.zip
      INSTALL_ROOT: ${{ runner.temp }}\qt-6.9
      ARTIFACTS_DIR: ${{ runner.temp }}\artifacts
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Install build tools
        run: |
          choco install -y cmake ninja 7zip openssl libclang gperf
          # Ensure Visual Studio 2022 exists
          echo "Using VS2022"

      - name: Download and extract Qt source
        run: |
          powershell -Command "Invoke-WebRequest $env:QT_SOURCE_URL -OutFile qt6.zip"
          7z x qt6.zip -y -oqt6_src

      - name: Create artifact directory
        run: |
          mkdir "$ARTIFACTS_DIR"

      # Define build types
      - name: Build configurations
        run: |
          pushd qt6_src\qt-everywhere-src-6.9.0
          for %%C in (Debug Release "DebugAndRelease") do (
            echo Building %%C...
            set BUILD_DIR=..\build-%%C
            mkdir "%%BUILD_DIR%"
            cd "%%BUILD_DIR%"
            set CMKIT=
            if "%%C"=="DebugAndRelease" (
              set CMAKE_BUILD_TYPE=RelWithDebInfo
            ) else (
              set CMAKE_BUILD_TYPE=%%C
            )
            cmake ..\qt-everywhere-src-6.9.0 \
              -G Ninja \
              -DCMAKE_BUILD_TYPE=%CMAKE_BUILD_TYPE% \
              -DCMAKE_INSTALL_PREFIX=%INSTALL_ROOT%\qt-%C% \
              -DQT_FEATURE_webengine=OFF \
              -DOPENSSL_ROOT_DIR="C:/Program Files/OpenSSL-Win64" \
              -DClang_INCLUDE_DIR="C:/Program Files/LLVM/include" \
              -DGPERF_EXECUTABLE="C:/ProgramData/chocolatey/bin/gperf.exe"
            ninja
            ninja install
            popd
          )

      - name: Package builds
        run: |
          pushd $INSTALL_ROOT
          for %%D in (Debug Release DebugAndRelease) do (
            7z a -t7z "$ARTIFACTS_DIR\qt-6.9.0-win-msvc2022-%%D.7z" "qt-%%D"
          )
          popd

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref }}
          release_name: Qt 6.9.0 Windows Builds
          draft: false
          prerelease: false

      - name: Upload build artifacts
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.ARTIFACTS_DIR }}\qt-6.9.0-win-msvc2022-Debug.7z
          asset_name: qt-6.9.0-win-msvc2022-Debug.7z
          asset_content_type: application/x-7z-compressed

      - name: Upload Release artifact: Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.ARTIFACTS_DIR }}\qt-6.9.0-win-msvc2022-Release.7z
          asset_name: qt-6.9.0-win-msvc2022-Release.7z
          asset_content_type: application/x-7z-compressed

      - name: Upload Release artifact: DebugAndRelease
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.ARTIFACTS_DIR }}\qt-6.9.0-win-msvc2022-DebugAndRelease.7z
          asset_name: qt-6.9.0-win-msvc2022-DebugAndRelease.7z
          asset_content_type: application/x-7z-compressed
