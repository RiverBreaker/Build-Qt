name: Build MinGW-w64 from source

on:
  workflow_dispatch:

jobs:
  build-mingw64:
    name: Build MinGW-w64 – ${{ matrix.thread }} with ${{ matrix.crt }} for Windows (x86_64)
    runs-on: windows-latest
    permissions:
      contents: write

    strategy:
      matrix:
        thread: [posix, win32, mcf]
        crt: [msvcrt, ucrt]
        exclude: 
          - thread: mcf
            crt: msvcrt
    env:
      ARCH: x86_64
      HOST_TARGET: x86_64-w64-mingw32
      # 用于MSYS2操作的Unix路径
      PREFIX_UNIX: /c/mingw64-${{ matrix.thread }}-seh-${{ matrix.crt }}
      # 用于Windows操作的路径
      PREFIX_WIN: C:/mingw64-${{ matrix.thread }}-seh-${{ matrix.crt }}
      DISPLAY_NAME: x86_64-${{ matrix.thread }}-seh-${{ matrix.crt }}
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup MSYS2
      uses: msys2/setup-msys2@v2
      with:
        update: true
        install: >-
          base-devel
          mingw-w64-x86_64-toolchain
          git
          wget
          tar
          gzip
          make
          autoconf
          automake
          libtool
          
    - name: Clone MinGW-w64 source
      shell: msys2 {0}
      run: |
        git clone https://github.com/mingw-w64/mingw-w64.git
        cd mingw-w64
        # 可选：检出特定版本
        git checkout tags/v13.0.0 -b v13.0.0

    - name: Build MinGW-w64
      shell: msys2 {0}
      run: |
        cd mingw-w64
        ls
        mkdir build && cd build
        
        # 构建配置参数
        ../configure \
          --prefix=${{ env.PREFIX_UNIX }} \
          --enable-threads=${{ matrix.thread }} \
          --with-default-msvcrt=${{ matrix.crt }} \
          --enable-seh
          
        # 编译和安装
        make -j1
        make install
        ls ${{ env.PREFIX_UNIX }}
        
    - name: Download GCC source
      shell: msys2 {0}
      run: |
        # 下载GCC 13.2.0源码
        git clone https://github.com/gcc-mirror/gcc.git
        cd gcc
        git checkout tags/releases/gcc-13.2.0 -b gcc-13.2.0
        # 配置contrib/download_prerequisites自动下载依赖
        ./contrib/download_prerequisites
        
    - name: Build and install GCC
      shell: msys2 {0}
      run: |
        cd gcc
        mkdir build && cd build

        export CFLAGS_FOR_TARGET="-I${{ env.PREFIX_UNIX }}/include"
        export CXXFLAGS_FOR_TARGET="-I${{ env.PREFIX_UNIX }}/include"
        export LDFLAGS_FOR_TARGET="-L${{ env.PREFIX_UNIX }}/lib"

        # 配置GCC使用刚安装的MinGW-w64运行时
        ../configure \
          --prefix=${{ env.PREFIX_UNIX }} \
          --host=${{ env.HOST_TARGET }} \
          --build=${{ env.HOST_TARGET }} \
          --target=${{ env.HOST_TARGET }} \
          --with-sysroot=${{ env.PREFIX_UNIX }} \
          --with-native-system-header-dir=${{ env.PREFIX_UNIX }}/include \
          --enable-languages=c,c++ \
          --enable-libgomp \
          --enable-libquadmath \
          --enable-libssp \
          --enable-libvtv \
          --enable-libstdcxx-time=yes \
          --with-gnu-ld \
          --disable-symvers \
          --enable-threads=${{ matrix.thread }} \
          --with-default-msvcrt=${{ matrix.crt }} \
          --enable-seh \
          --disable-multilib \
          --disable-nls \
          --with-stage1-ldflags="-static" \
          --with-boot-ldflags="-static"
          
        # 编译并安装（这将需要很长时间）
        make -j1 all-gcc
        make -j1 all-target-libstdc++-v3
        make install-gcc
        make install-target-libstdc++-v3
        
    - name: Verify full installation
      shell: msys2 {0}
      run: |
        echo "Checking installation directories:"
        ls -la ${{ env.PREFIX_UNIX }}

        echo -e "\nChecking bin directory contents:"
        ls -la ${{ env.PREFIX_UNIX }}/bin

        echo -e "\nGCC Version:"
        ${{ env.PREFIX_UNIX }}/bin/${{ env.HOST_TARGET }}-gcc --version
        
        echo -e "\nConfiguration details:"
        ${{ env.PREFIX_UNIX }}/bin/${{ env.HOST_TARGET }}-gcc -v 2>&1 | grep -E "Thread model|exception|msvcrt"

    - name: Archive build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: mingw64-${{ env.DISPLAY_NAME }}
        path: ${{ env.PREFIX_WIN }}