name: check for cmake version
on:
  workflow_dispatch:
    inputs:
      qt_majmin:
        description: 'Qt ‰∏ªÁâàÊú¨Âè∑‰∏éÊ¨°ÁâàÊú¨Âè∑(>=6.7.0)'
        required: true
        default: '6.9'
      qt_patch:
        description: 'Qt Ë°•‰∏ÅÁâàÊú¨Âè∑(‰æãÂ¶Ç 0)'
        required: false
        default: '0'

jobs:
  check-cmake:
    name: check cmake version
    runs-on: windows-latest
    permissions:
      contents: write

    strategy:
      matrix:
        config: [Debug, Release, RelWithDebInfo]
    env:
      QT_MAJMIN: ${{ inputs.qt_majmin }}
      QT_VERSION: ${{ inputs.qt_majmin }}.${{ inputs.qt_patch }}
      TAG: v${{ inputs.qt_majmin }}.${{ inputs.qt_patch }}-shared
      GITHUB_REPOSITORY: ${{ github.repository }}
      GH_TOKEN: ${{ github.token }}
      QT_SOURCE_URL: https://mirrors.tuna.tsinghua.edu.cn/qt/archive/qt/${{ inputs.qt_majmin }}/${{ inputs.qt_majmin }}.${{ inputs.qt_patch }}/single/qt-everywhere-src-${{ inputs.qt_majmin }}.${{ inputs.qt_patch }}.zip

    steps:
      - uses: actions/checkout@v4

      - name: Check cmake version
        run: cmake --version

      - name: Check VS cmake version
        shell: cmd
        run: |
          for /f "usebackq tokens=*" %%V in (`"%ProgramFiles(x86)%\Microsoft Visual Studio\Installer\vswhere.exe" -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath`) do set "vsRoot=%%V"
          call "%vsRoot%\VC\Auxiliary\Build\vcvarsall.bat" amd64
          cmake --version

      - name: new cmake
        uses: lukka/get-cmake@latest
        with:
          cmakeVersion: '3.29.x'

      - name: Check new cmake version
        run: cmake --version

      - name: Check VS new cmake version
        shell: cmd
        run: |
          for /f "usebackq tokens=*" %%V in (`"%ProgramFiles(x86)%\Microsoft Visual Studio\Installer\vswhere.exe" -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath`) do set "vsRoot=%%V"
          call "%vsRoot%\VC\Auxiliary\Build\vcvarsall.bat" amd64
          cmake --version

      # ÂÆâË£Öpython
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          architecture: 'x64'

      # ÂÆâË£Ömsvc
      - name: Add MSBuild to PATH
        uses: microsoft/setup-msbuild@v2
        with:
          msbuild-architecture: x64

      # ÂÆâË£Övsdevenv
      - name: Setup vsdevenv
        uses: seanmiddleditch/gha-setup-vsdevenv@master

      - name: Enable long paths
        shell: pwsh
        run: |
          git config --system core.longpaths true
          Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem" `
            -Name "LongPathsEnabled" -Value 1

      - name: Cache Qt source
        id: cache-qt-source
        uses: actions/cache@v3
        with:
          key: qt-src-${{ env.QT_VERSION }}-windows
          path: ${{ runner.temp }}/qt6_src

      - name: Install build tools via Chocolatey
        shell: pwsh
        run: |
          choco install -y 7zip openssl llvm gperf `
            --no-progress `
            --limit-output

          # 2. ËæìÂá∫ÂêÑÂ∑•ÂÖ∑ÂÆâË£ÖË∑ØÂæÑ
          Write-Host ""
          Write-Host "üîç Installed tool locations:"
          $tools = @('cmake', 'ninja', '7z', 'openssl', 'clang', 'gperf')
          foreach ($t in $tools) {
            $cmd = Get-Command $t -ErrorAction SilentlyContinue
            if ($cmd) {
              Write-Host "  $t -> $($cmd.Source)"
            } else {
              Write-Warning "  $t not found in PATH"
            }
          }

      - name: Download & extract Qt
        if: steps.cache-qt-source.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          $zip = Join-Path $env:RUNNER_TEMP qt6.zip
          Invoke-WebRequest $env:QT_SOURCE_URL -OutFile $zip
          7z x $zip -y -o"$env:RUNNER_TEMP/qt6_src" -mmt=on

      - name: Prepare build directory
        shell: pwsh
        run: |
          Remove-Item -Recurse -Force "$env:RUNNER_TEMP/build" -ErrorAction SilentlyContinue
          New-Item -ItemType Directory "$env:RUNNER_TEMP/build" | Out-Null

      - name: Apply Qt 6.0.0 Designer ui_*.h patch
        if: env.QT_VERSION <= '6.0.1'
        shell: pwsh
        run: |
          cd "$env:RUNNER_TEMP/qt6_src/qt-everywhere-src-$env:QT_VERSION"
          $File = "qttools/src/designer/src/lib/CMakeLists.txt"
          # ÈúÄË¶ÅÊèíÂÖ•ÁöÑÂÜÖÂÆπÔºåÊ≥®ÊÑèËøôÈáå‰ΩøÁî®ÂçïÂºïÂè∑ÈÅøÂÖçÂèòÈáèÂ±ïÂºÄ
          $InsertText = @'
          # Workaround for Ninja+MSVC: pre-generate ui_*.h so Designer_autogen has the files.
          # This avoids "missing and no known rule to make it" errors when automoc/autouic
          # doesn't create the auto-generated headers early enough for Ninja+MSVC.
          if (MSVC AND CMAKE_GENERATOR MATCHES "Ninja")
              # base of the .ui files (relative to this CMakeLists)
              set(UIC_BASE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/shared")

              # find all .ui files under shared/templates/forms
              file(GLOB_RECURSE UI_FILES "${UIC_BASE_DIR}/templates/forms/*.ui")
              set(PREGENERATED_UIC_FILES "")

              foreach(ui ${UI_FILES})
                  # relative path relative to shared (e.g. templates/forms/240x320/Dialog.ui)
                  file(RELATIVE_PATH rel_to_shared "${UIC_BASE_DIR}" "${ui}")
                  get_filename_component(fn ${rel_to_shared} NAME_WE)
                  get_filename_component(rel_dir ${rel_to_shared} DIRECTORY)

                  set(out "${CMAKE_CURRENT_BINARY_DIR}/Designer_autogen/include_${CMAKE_BUILD_TYPE}/shared/${rel_dir}/${fn}.h")

                  # ensure output directory exists
                  file(MAKE_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/Designer_autogen/include_${CMAKE_BUILD_TYPE}/shared/${rel_dir}")

                  add_custom_command(
                      OUTPUT ${out}
                      COMMAND "$<TARGET_FILE:uic>" "${ui}" -o "${out}"
                      DEPENDS "${ui}"
                      COMMENT "Pre-generating ${out} from ${ui}"
                      VERBATIM
                  )

                  list(APPEND PREGENERATED_UIC_FILES ${out})
              endforeach()

              if (PREGENERATED_UIC_FILES)
                  add_custom_target(Designer_pregenerate_uic DEPENDS ${PREGENERATED_UIC_FILES})
                  # ensure Designer builds after pregeneration
                  add_dependencies(Designer Designer_pregenerate_uic)
              endif()
          endif()
          '@
          # ËØªÂèñÂéüÊñá‰ª∂
          $Content = Get-Content $File

          # Êñ∞Êï∞ÁªÑÂ≠òÊîæÊúÄÁªàÂÜÖÂÆπ
          $NewContent = @()
          $Inserted = $false

          foreach ($line in $Content) {
              $NewContent += $line
              if (-not $Inserted -and $line -match 'PRECOMPILED_HEADER') {
                  $NewContent += $InsertText
                  $Inserted = $true
              }
          }

          # ÂÜôÂõûÊñá‰ª∂
          Set-Content -Path $File -Value $NewContent -Encoding UTF8

          Write-Host "ÊèíÂÖ•ÂÆåÊàê„ÄÇ"

      - name: Configure & build & install ${{ matrix.config }}
        shell: cmd
        env:
          CONFIG: ${{ matrix.config }}
        run: |
          rem 1. Êü•Êâæ VS2022 ÂÆâË£ÖË∑ØÂæÑÂπ∂Âä†ËΩΩÁºñËØëÁéØÂ¢É
          for /f "usebackq tokens=*" %%V in (`"%ProgramFiles(x86)%\Microsoft Visual Studio\Installer\vswhere.exe" -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath`) do set "vsRoot=%%V"
          call "%vsRoot%\VC\Auxiliary\Build\vcvarsall.bat" amd64

          rem 2. ËÆæÁΩÆË∑ØÂæÑ
          set "SRC_QT=%RUNNER_TEMP%\qt6_src\qt-everywhere-src-%QT_VERSION%"
          set "BUILD_DIR=%RUNNER_TEMP%\build-%CONFIG%"
          set "INSTALL_DIR=%RUNNER_TEMP%\qt-%QT_VERSION%\%CONFIG%"
          set "ARTIFACTS_DIR=%RUNNER_TEMP%\artifacts"

          rem 3. Ê∏ÖÁêÜ/ÂàõÂª∫
          if exist "%BUILD_DIR%" rmdir /s /q "%BUILD_DIR%"
          mkdir "%BUILD_DIR%" && cd /d "%BUILD_DIR%"
          mkdir "%INSTALL_DIR%" 2>nul
          mkdir "%ARTIFACTS_DIR%" 2>nul

          rem 4. ÈÄâÊã©Ê®°Âºè
          if /I "%CONFIG%"=="Debug" (
            set MODE=-debug
          ) else if /I "%CONFIG%"=="Release" (
            set MODE=-release
          ) else (
            set MODE=-debug-and-release
          )

          rem 5. Ë∞ÉÁî® configure
          call "%SRC_QT%\configure.bat" -shared %MODE% -prefix "%INSTALL_DIR%" ^
            -nomake examples -nomake tests -skip qtwebengine -opensource ^
            -confirm-license -qt-libpng -qt-libjpeg -qt-zlib -qt-pcre -qt-freetype ^
            -DLLVM_INSTALL_DIR="C:/Program Files/LLVM" -DFEATURE_clang=ON -DFEATURE_clangcpp=ON ^
            -schannel ^
            -platform win32-msvc ^
            -- -Wno-dev

          # rem Âè™ÂÖ≥ÂøÉ 6.0.x
          # if %MAJ%==6 if %MIN%==0 if %PAT% LSS 2 (
          #   cmake --build . --target Designer_autogen -j1
          # )

          rem 6. ÊûÑÂª∫ & ÂÆâË£Ö
          cmake --build . --parallel
          ninja install