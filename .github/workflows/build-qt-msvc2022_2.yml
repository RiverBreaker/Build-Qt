name: Build Qt 6.9 (Windows VS2022)

on:
  workflow_dispatch:

jobs:
  build-qt:
    name: Build Qt 6.9 for Windows (VS2022)
    runs-on: windows-latest
    env:
      QT_SOURCE_URL: https://download.qt.io/official_releases/qt/6.9/6.9.0/single/qt-everywhere-src-6.9.0.zip

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install build tools via Chocolatey
        run: |
          choco install -y cmake ninja 7zip openssl llvm gperf

      - name: Prepare environment paths
        shell: pwsh
        run: |
          "INSTALL_ROOT=$($env:RUNNER_TEMP)\qt-6.9" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "ARTIFACTS_DIR=$($env:RUNNER_TEMP)\artifacts" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Download Qt 6.9.0 source
        shell: pwsh
        run: |
          $zipPath = Join-Path $env:TEMP "qt6.zip"
          Invoke-WebRequest $env:QT_SOURCE_URL -OutFile $zipPath
          "QT_ZIP_PATH=$zipPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Extract Qt source
        shell: pwsh
        run: |
          7z x "$env:QT_ZIP_PATH" -y -o"${env:RUNNER_TEMP}\qt6_src"

      - name: Create directories
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path "$env:INSTALL_ROOT" -Force | Out-Null
          New-Item -ItemType Directory -Path "$env:ARTIFACTS_DIR" -Force | Out-Null

      - name: Build Debug configuration
        shell: pwsh
        run: |
          $buildDir = "$env:RUNNER_TEMP\build-Debug"
          New-Item -ItemType Directory -Path $buildDir -Force | Out-Null
          Push-Location $buildDir
          cmake "${env:RUNNER_TEMP}\qt6_src\qt-everywhere-src-6.9.0" -G Ninja `
            -DCMAKE_BUILD_TYPE=Debug `
            -DCMAKE_INSTALL_PREFIX="$env:INSTALL_ROOT\Debug" `
            -DQT_FEATURE_webengine=OFF `
            -DOPENSSL_ROOT_DIR="C:/Program Files/OpenSSL-Win64" `
            -DClang_INCLUDE_DIR="C:/Program Files/LLVM/include" `
            -DGPERF_EXECUTABLE="C:/ProgramData/chocolatey/bin/gperf.exe"
          ninja
          ninja install
          Pop-Location

      - name: Build Release configuration
        shell: pwsh
        run: |
          $buildDir = "$env:RUNNER_TEMP\build-Release"
          New-Item -ItemType Directory -Path $buildDir -Force | Out-Null
          Push-Location $buildDir
          cmake "${env:RUNNER_TEMP}\qt6_src\qt-everywhere-src-6.9.0" -G Ninja `
            -DCMAKE_BUILD_TYPE=Release `
            -DCMAKE_INSTALL_PREFIX="$env:INSTALL_ROOT\Release" `
            -DQT_FEATURE_webengine=OFF `
            -DOPENSSL_ROOT_DIR="C:/Program Files/OpenSSL-Win64" `
            -DClang_INCLUDE_DIR="C:/Program Files/LLVM/include" `
            -DGPERF_EXECUTABLE="C:/ProgramData/chocolatey/bin/gperf.exe"
          ninja
          ninja install
          Pop-Location

      - name: Build RelWithDebInfo configuration
        shell: pwsh
        run: |
          $buildDir = "$env:RUNNER_TEMP\build-RelWithDebInfo"
          New-Item -ItemType Directory -Path $buildDir -Force | Out-Null
          Push-Location $buildDir
          cmake "${env:RUNNER_TEMP}\qt6_src\qt-everywhere-src-6.9.0" -G Ninja `
            -DCMAKE_BUILD_TYPE=RelWithDebInfo `
            -DCMAKE_INSTALL_PREFIX="$env:INSTALL_ROOT\RelWithDebInfo" `
            -DQT_FEATURE_webengine=OFF `
            -DOPENSSL_ROOT_DIR="C:/Program Files/OpenSSL-Win64" `
            -DClang_INCLUDE_DIR="C:/Program Files/LLVM/include" `
            -DGPERF_EXECUTABLE="C:/ProgramData/chocolatey/bin/gperf.exe"
          ninja
          ninja install
          Pop-Location

      - name: Package builds
        shell: pwsh
        run: |
          Push-Location $env:INSTALL_ROOT
          7z a "$env:ARTIFACTS_DIR\qt-6.9.0-win-msvc2022-Debug.7z" "Debug"
          7z a "$env:ARTIFACTS_DIR\qt-6.9.0-win-msvc2022-Release.7z" "Release"
          7z a "$env:ARTIFACTS_DIR\qt-6.9.0-win-msvc2022-RelWithDebInfo.7z" "RelWithDebInfo"
          Pop-Location

      - name: Create GitHub Release
        uses: actions/create-release@v1
        id: create_release
        with:
          tag_name: ${{ github.ref }}
          release_name: Qt 6.9.0 Windows VS2022 Builds
          draft: false
          prerelease: false

      - name: Upload Debug artifact
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "$env:ARTIFACTS_DIR\qt-6.9.0-win-msvc2022-Debug.7z"
          asset_name: qt-6.9.0-win-msvc2022-Debug.7z
          asset_content_type: application/x-7z-compressed

      - name: Upload Release artifact
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "$env:ARTIFACTS_DIR\qt-6.9.0-win-msvc2022-Release.7z"
          asset_name: qt-6.9.0-win-msvc2022-Release.7z
          asset_content_type: application/x-7z-compressed

      - name: Upload RelWithDebInfo artifact
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "$env:ARTIFACTS_DIR\qt-6.9.0-win-msvc2022-RelWithDebInfo.7z"
          asset_name: qt-6.9.0-win-msvc2022-RelWithDebInfo.7z
          asset_content_type: application/x-7z-compressed
