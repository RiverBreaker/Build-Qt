name: Build Qt 6.x.x -static for macOS (Clang15)

on:
  workflow_dispatch:
    inputs:
      qt_majmin:
        description: 'Qt 主版本号与次版本号(>=6.7.0)'
        required: true
        default: '6.9'
      qt_patch:
        description: 'Qt 补丁版本号(例如 0)'
        required: false
        default: '0'
      
jobs:
  build-qt:
    name: Build Qt ${{ inputs.qt_majmin }}.${{ inputs.qt_patch }} – ${{ matrix.config }} for macOS
    runs-on: macos-latest
    permissions:
      contents: write

    strategy:
      matrix:
        config: [Debug, Release, RelWithDebInfo]
    env:
      QT_MAJMIN: ${{ inputs.qt_majmin }}
      QT_VERSION: ${{ inputs.qt_majmin }}.${{ inputs.qt_patch }}
      TAG: v${{ inputs.qt_majmin }}.${{ inputs.qt_patch }}-static
      GITHUB_REPOSITORY: ${{ github.repository }}
      GH_TOKEN: ${{ github.token }}
      QT_SOURCE_URL: https://download.qt.io/archive/qt/${{ inputs.qt_majmin }}/${{ inputs.qt_majmin }}.${{ inputs.qt_patch }}/single/qt-everywhere-src-${{ inputs.qt_majmin }}.${{ inputs.qt_patch }}.tar.xz

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
          
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          architecture: 'x64'

      - name: Cache Qt source
        id: cache-qt-source
        uses: actions/cache@v3
        with:
          key: qt-src-${{ env.QT_VERSION }}-Unix
          path: ${{ runner.temp }}/qt6_src

      - name: Install build tools via Homebrew
        shell: bash
        run: |
          echo "🔧 Installing build tools via Homebrew..."
          brew update
          brew install cmake ninja openssl gperf
          echo "🔍 Installed tool locations:"
          for tool in cmake ninja openssl gperf; do
            which $tool || echo "$tool not found in PATH"
          done
          clang --version

      - name: Download & extract Qt
        if: steps.cache-qt-source.outputs.cache-hit != 'true'
        shell: bash
        run: |
          ARCHIVE="$RUNNER_TEMP/qt6.tar.xz"
          TARGET_DIR="$RUNNER_TEMP/qt6_src" 
          echo "📦 Downloading Qt source archive..."
          curl -L -o "$ARCHIVE" "$QT_SOURCE_URL"
          echo "📂 Extracting .tar.xz via tar..."
          rm -rf "$TARGET_DIR"
          mkdir -p "$TARGET_DIR"
          # -x: extract; -J: .xz; -f: file; -C: target dir
          tar -xJf "$ARCHIVE" -C "$TARGET_DIR"
          echo "✅ Extraction complete: $TARGET_DIR"

      - name: Configure & build & install ${{ matrix.config }}
        shell: bash
        env:
          CONFIG: ${{ matrix.config }}
        run: |
          SRC_QT="$RUNNER_TEMP/qt6_src/qt-everywhere-src-$QT_VERSION"
          BUILD_DIR="$RUNNER_TEMP/build-${CONFIG}"
          INSTALL_DIR="$RUNNER_TEMP/qt-$QT_VERSION/$CONFIG"
          ARTIFACTS_DIR="$RUNNER_TEMP/artifacts"

          rm -rf "$BUILD_DIR"
          mkdir -p "$BUILD_DIR" && cd "$BUILD_DIR"
          mkdir -p "$INSTALL_DIR"
          mkdir -p "$ARTIFACTS_DIR"

          # 选择模式
          if [[ "$CONFIG" == "Debug" ]]; then
            MODE="-debug"
          elif [[ "$CONFIG" == "Release" ]]; then
            MODE="-release"
          else
            MODE="-release -force-debug-info"
          fi

          # 调用 qt-configure
          "$SRC_QT/configure" \
            -static $MODE -static-runtime \
            -gc-binaries -no-pch -reduce-exports \
            -prefix "$INSTALL_DIR" \
            -nomake examples -nomake tests -skip qtwebengine  \
            -opensource -confirm-license \
            -qt-libpng -qt-libjpeg -qt-zlib -qt-pcre -qt-freetype \
            -no-sql-psql -no-framework \
            -- -DCMAKE_CXX_FLAGS="-ffunction-sections -fdata-sections" \
            -DCMAKE_EXE_LINKER_FLAGS="-Wl,--gc-sections" -Wno-dev 

          # 构建并安装
          cmake --build . --parallel 2
          cmake --install . 

          # 清理构建目录和源码目录
          echo "🧹 Cleaning up build directory and src directory..."
          rm -rf "$BUILD_DIR" "$SRC_QT"
          echo "✅ Cleaned up."

      - name: Package ${{ matrix.config }} as tar.gz
        shell: bash
        env:
          CONFIG: ${{ matrix.config }}
        run: |
          set -euo pipefail

          ARTIFACTS_DIR="$RUNNER_TEMP/artifacts"
          mkdir -p "$ARTIFACTS_DIR"

          CLANG_FULL=$(clang --version | grep -oE 'clang version [0-9]+\.[0-9]+\.[0-9]+' | awk '{print $3}')
          CLANG_VER=$(echo "$CLANG_FULL" | cut -d. -f1)
          echo "🔍 Detected Clang: $CLANG_FULL → $CLANG_VER"
          
          BASE="qt-${QT_VERSION}-static-mac-clang${CLANG_VER}_x64-${CONFIG}"
          SINGLE="$ARTIFACTS_DIR/$BASE.tar.gz"
          LIMIT=$((1950 * 1024 * 1024))

          SRC_DIR="$RUNNER_TEMP/qt-${QT_VERSION}"

          echo "📦 Trying to create single archive: $SINGLE"
          tar -C "$SRC_DIR" -czf "$SINGLE" "$CONFIG"

          SIZE=$(stat -f%z "$SINGLE")

          echo "📏 Archive size: $((SIZE/1024/1024)) MiB (limit is $((LIMIT/1024/1024)) MiB)"

          if (( SIZE > LIMIT )); then
            echo "⚠️  Size exceeds limit, regenerating as split volumes…"
            rm -f "$SINGLE"

            # 使用管道压缩并分卷，每卷 1950m
            tar -C "$SRC_DIR" -czf - "$CONFIG" \
              | split -b1950m - "$ARTIFACTS_DIR/$BASE.tar.gz.part-"

            echo "✅ Created split volumes in $ARTIFACTS_DIR:"
            ls -1 "$ARTIFACTS_DIR/$BASE.tar.gz.part-"*
          else
            echo "✅ Created single archive: $SINGLE"
          fi

      - name: Create Tag if not exists
        if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main'
        shell: bash
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
          REPO:      ${{ github.repository }}
          TAG:       v${{ env.QT_VERSION }}-static
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          # 检查 TAG 是否已存在
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Local tag $TAG already exists, skip."
          elif git ls-remote --tags origin "$TAG" | grep -q "$TAG"; then
            echo "Remote tag $TAG already exists, skip."
          else
            git tag "$TAG"
            git push "https://x-access-token:$PAT_TOKEN@github.com/$REPO" "$TAG"
            echo "Tag $TAG created and pushed."
          fi

      - name: Ensure Release exists or create
        id: ensure_release
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          TAG="v${{ env.QT_VERSION }}-static"
          if gh release view "$TAG" > /dev/null 2>&1; then
            echo "found=existing" >> $GITHUB_OUTPUT
          else
            echo "found=new" >> $GITHUB_OUTPUT
            gh release create "$TAG" \
              --title "Qt $TAG Auto Builds" \
              --notes "Automated build of Qt $TAG" \
              --draft=false \
              --prerelease=false
          fi

      - name: Upload build artifacts
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail

          CLANG_FULL=$(clang --version | grep -oE 'clang version [0-9]+\.[0-9]+\.[0-9]+' | awk '{print $3}')
          CLANG_VER=$(echo "$CLANG_FULL" | cut -d. -f1)
          echo "🔍 Detected Clang: $CLANG_FULL → $CLANG_VER"
          
          TAG="v${{ env.QT_VERSION }}-static"
          BASE="qt-${QT_VERSION}-static-mac-clang${CLANG_VER}_x64-${{ matrix.config }}"
          ART_DIR="$RUNNER_TEMP/artifacts"

          echo "🔍 Looking for artifacts in $ART_DIR matching $BASE*"
          ls -1 "$ART_DIR/$BASE.tar.gz.part-"*

          found=false
          # 注意：如果没有匹配项，bash 会把 glob 本身当做字面字符串；
          # 所以这里先测试一下文件是否真的存在。
          for file in "$ART_DIR"/"$BASE"*.tar.gz*; do
            if [ -e "$file" ]; then
              echo "📤 Uploading $(basename "$file") to release $TAG"
              gh release upload "$TAG" "$file" --clobber
              found=true
            fi
          done

          if ! $found; then
            echo "❌ No artifacts found to upload for $BASE"
            exit 1
          fi

          echo "✅ All artifacts uploaded."