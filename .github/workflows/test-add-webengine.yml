name: Build with VS2019 Toolset (v142) in VS2022

on:
  workflow_dispatch:
    inputs:
      qt_majmin:
        description: 'Qt ‰∏ªÁâàÊú¨Âè∑‰∏éÊ¨°ÁâàÊú¨Âè∑(>=6.7.0)'
        required: true
        default: '6.8'
      qt_patch:
        description: 'Qt Ë°•‰∏ÅÁâàÊú¨Âè∑(‰æãÂ¶Ç 0)'
        required: false
        default: '3'

jobs:
  build:
    runs-on: windows-latest  # ‰ΩøÁî®ÊúÄÊñ∞ÈïúÂÉèÔºåËá™Â∏¶ VS2022
    permissions:
      contents: write

    strategy:
      matrix:
        config: [Debug, Release, RelWithDebInfo]
    env:
      QT_MAJMIN: ${{ inputs.qt_majmin }}
      QT_VERSION: ${{ inputs.qt_majmin }}.${{ inputs.qt_patch }}
      TAG: v${{ inputs.qt_majmin }}.${{ inputs.qt_patch }}-shared
      GITHUB_REPOSITORY: ${{ github.repository }}
      GH_TOKEN: ${{ github.token }}
      QT_SOURCE_URL: https://download.qt.io/archive/qt/${{ inputs.qt_majmin }}/${{ inputs.qt_majmin }}.${{ inputs.qt_patch }}/single/qt-everywhere-src-${{ inputs.qt_majmin }}.${{ inputs.qt_patch }}.zip
      LIBCLANG_URL: https://download.qt.io/development_releases/prebuilt/libclang/qt/libclang-llvmorg-20.1.0-windows-vs2022_64.7z

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: new cmake
        uses: lukka/get-cmake@latest
        with:
          cmakeVersion: '3.29.x'

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          architecture: 'x64'
      - run: pip install html5lib

      # ==================== Á°Æ‰øù v142 (VS2019) Â∑•ÂÖ∑ÈõÜÂ∑≤ÂÆâË£Ö ====================
      - name: Ensure v142 Toolset Installed
        if: ${{ inputs.qt_majmin <= '6.5' }}
        shell: powershell
        run: |
          $vsPath = & "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe" -latest -property installationPath
          if (-not $vsPath) {
            Write-Error "Visual Studio not found!"
            exit 1
          }

          # Ê£ÄÊü•ÊòØÂê¶Â∑≤ÂÆâË£Ö v142 Â∑•ÂÖ∑ÈõÜ (ÁâàÊú¨Âè∑ 14.29.x)
          $v142Path = Get-ChildItem "$vsPath\VC\Tools\MSVC\14.29*" -Directory -ErrorAction SilentlyContinue | Select-Object -First 1
          if (-not $v142Path) {
            Write-Host "v142 toolset not found, installing..."
            # ÂÆâË£Ö v142 Â∑•ÂÖ∑ÈõÜÁªÑ‰ª∂ÔºàÈÄöÂ∏∏Âá†ÂàÜÈíüÂÜÖÂÆåÊàêÔºâ
            Start-Process -Wait -FilePath "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vs_installer.exe" `
              -ArgumentList "modify", "--installPath `"$vsPath`"", "--add Microsoft.VisualStudio.Component.VC.14.29.x86.x64", "--quiet", "--norestart", "--wait"
            Write-Host "‚úÖ v142 toolset installed."
          } else {
            Write-Host "‚úÖ v142 toolset already installed at: $($v142Path.FullName)"
          }

      # ==================== Âä†ËΩΩ v142 ÁéØÂ¢ÉÂèòÈáè ====================
      - name: Setup v142 (VS2019) Environment
        if: ${{ inputs.qt_majmin <= '6.5' }}
        id: setup-v142
        shell: cmd
        run: |
          @echo off
          call "%ProgramFiles(x86)%\Microsoft Visual Studio\Installer\vswhere.exe" -latest -property installationPath > vs_path.txt
          set /p VS_PATH=<vs_path.txt
          call "%VS_PATH%\Common7\Tools\VsDevCmd.bat" -arch=amd64 -host_arch=amd64 -vcvars_ver=14.29

          :: ÂØºÂá∫ÂÖ≥ÈîÆÁéØÂ¢ÉÂèòÈáè‰æõÂêéÁª≠Ê≠•È™§‰ΩøÁî®
          echo COMPILER_VERSION=v142>> %GITHUB_ENV%
          echo VCINSTALLDIR=%VCINSTALLDIR%>> %GITHUB_ENV%
          echo INCLUDE=%INCLUDE%>> %GITHUB_ENV%
          echo LIB=%LIB%>> %GITHUB_ENV%

          :: ËæìÂá∫ PATH Âà∞Êñá‰ª∂ÔºàÂõ†‰∏∫Â§™Èïø‰∏çÈÄÇÂêà GITHUB_ENVÔºâ
          echo %PATH% > v142_path.txt

      - name: Cache Qt source
        id: cache-qt-source
        uses: actions/cache@v3
        with:
          key: qt-src-${{ env.QT_VERSION }}-windows
          path: ${{ runner.temp }}/qt6_src

      - name: Install build tools via Chocolatey
        shell: pwsh
        run: |
          choco install -y 7zip gperf winflexbison3 `
            --no-progress `
            --limit-output
          choco install -y openssl --version=3.5.4 --no-progress --limit-output
          $clang_zip = Join-Path $env:RUNNER_TEMP clang.7z
          Invoke-WebRequest $env:LIBCLANG_URL -OutFile $clang_zip
          7z x $clang_zip -y -o"$env:RUNNER_TEMP/libclang" -mmt=on

          # 2. ËæìÂá∫ÂêÑÂ∑•ÂÖ∑ÂÆâË£ÖË∑ØÂæÑ
          Write-Host ""
          Write-Host "üîç Installed tool locations:"
          $tools = @('cmake', 'ninja', '7z', 'clang', 'gperf', 'openssl')
          foreach ($t in $tools) {
            $cmd = Get-Command $t -ErrorAction SilentlyContinue
            if ($cmd) {
              Write-Host "  $t -> $($cmd.Source)"
            } else {
              Write-Warning "  $t not found in PATH"
            }
          }

      - name: Download & extract Qt
        if: steps.cache-qt-source.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          $qt_zip = Join-Path $env:RUNNER_TEMP qt6.zip
          Invoke-WebRequest $env:QT_SOURCE_URL -OutFile $qt_zip
          7z x $qt_zip -y -o"$env:RUNNER_TEMP/qt6_src" -mmt=on

      - name: Prepare build directory
        shell: pwsh
        run: |
          Remove-Item -Recurse -Force "$env:RUNNER_TEMP/build" -ErrorAction SilentlyContinue
          New-Item -ItemType Directory "$env:RUNNER_TEMP/build" | Out-Null

      - name: Apply patch
        if: ${{ inputs.qt_majmin == '6.0' || inputs.qt_majmin == '6.1' }}
        shell: bash
        run: |
          cd $RUNNER_TEMP/qt6_src/qt-everywhere-src-$QT_VERSION
          ls $GITHUB_WORKSPACE/patchs
          patch -p1 -i "$GITHUB_WORKSPACE/patchs/fixed-low-version-qt-for-Ninja-MSVC-pre-generate-ui-headers.patch"

      - name: Configure & build & install ${{ matrix.config }}
        shell: cmd
        env:
          CONFIG: ${{ matrix.config }}
        run: |
          rem 1. Êü•Êâæ VS2022 ÂÆâË£ÖË∑ØÂæÑÂπ∂Âä†ËΩΩÁºñËØëÁéØÂ¢É
          setlocal enabledelayedexpansion

          if "${{ inputs.qt_majmin >= '6.5' }}" == "true" (
            echo "Using VS2022"
            set "vsRoot=C:\Program Files\Microsoft Visual Studio\2022\Enterprise"
            echo Using vsRoot=!vsRoot!
            call "!vsRoot!\VC\Auxiliary\Build\vcvarsall.bat" amd64 || (echo vcvarsall failed && exit /b 1)
          ) else (
            echo "Using VS2019"
            call "%GITHUB_WORKSPACE%\scripts\window_s\vs_setup_v142.cmd" || exit /b 1
          )

          where cl >nul 2>&1 || (echo ERROR: cl not found in PATH after vcvars && exit /b 1)

          rem 2. ËÆæÁΩÆË∑ØÂæÑ
          set "SRC_QT=%RUNNER_TEMP%\qt6_src\qt-everywhere-src-%QT_VERSION%"
          set "BUILD_DIR=%RUNNER_TEMP%\build-%CONFIG%"
          set "INSTALL_DIR=%RUNNER_TEMP%\qt-%QT_VERSION%\%CONFIG%"
          set "ARTIFACTS_DIR=%RUNNER_TEMP%\artifacts"

          rem 3. Ê∏ÖÁêÜ/ÂàõÂª∫
          if exist "%BUILD_DIR%" rmdir /s /q "%BUILD_DIR%"
          mkdir "%BUILD_DIR%" && cd /d "%BUILD_DIR%"
          mkdir "%INSTALL_DIR%" 2>nul
          mkdir "%ARTIFACTS_DIR%" 2>nul

          rem 4. ÈÄâÊã©Ê®°Âºè
          if /I "%CONFIG%"=="Debug" (
            set MODE=-debug
          ) else if /I "%CONFIG%"=="Release" (
            set MODE=-release
          ) else (
            set MODE=-debug-and-release
          )

          rem 5. Ë∞ÉÁî® configure
          call "%SRC_QT%\configure.bat" -shared %MODE% -prefix "%INSTALL_DIR%" ^
            -nomake examples -nomake tests ^
            -opensource -confirm-license ^
            -qt-libpng -qt-libjpeg -qt-zlib -qt-pcre -qt-freetype ^
            -schannel -platform win32-msvc ^
            -- ^
            -DLLVM_INSTALL_DIR="D:/a/_temp/libclang" ^
            -DClang_DIR="D:/a/_temp/libclang/lib/cmake/clang" ^
            -DLLVM_DIR="D:/a/_temp/libclang/lib/cmake/llvm" ^
            -DCMAKE_PREFIX_PATH="D:/a/_temp/libclang" ^
            -DClang_INCLUDE_DIR="D:/a/_temp/libclang/include" ^
            -DClang_LIBRARY="D:/a/_temp/libclang/lib/libclang.lib" ^
            -DFEATURE_clang=ON -DFEATURE_clangcpp=ON ^
            -Wno-dev

          rem 6. ÊûÑÂª∫ & ÂÆâË£Ö
          cmake --build . --parallel
          ninja install

      - name: Package ${{ matrix.config }} as zip
        shell: cmd
        env:
          CONFIG: ${{ matrix.config }}
        run: |
          if not exist "%RUNNER_TEMP%\artifacts" mkdir "%RUNNER_TEMP%\artifacts"
          7z a "%RUNNER_TEMP%\artifacts\qt-${{ env.QT_VERSION }}-shared-win-msvc2022-%CONFIG%.7z" ^
            "%RUNNER_TEMP%\qt-${{ env.QT_VERSION }}\%CONFIG%" -mmt=on

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: qt-${{ env.QT_VERSION }}-shared-win-msvc2022-${{ matrix.config }}
          path: ${{ runner.temp }}/artifacts/qt-${{ env.QT_VERSION }}-shared-win-msvc2022-${{ matrix.config }}.7z